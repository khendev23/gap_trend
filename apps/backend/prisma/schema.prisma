generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model kellyImage {
  imageId          BigInt   @id @default(autoincrement()) @map("image_id")
  originalFilename String   @map("original_filename") @db.VarChar(255)
  storedFilename   String   @map("stored_filename") @db.VarChar(255)
  filePath         String   @map("file_path") @db.VarChar(500)
  fileExtension    String   @map("file_extension") @db.VarChar(10)
  contentType      String   @map("content_type") @db.VarChar(100)
  fileSize         BigInt   @map("file_size")
  createdAt        DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt        DateTime @default(now()) @map("updated_at") @db.DateTime(0)
  deleted          Boolean  @default(false) @map("deleted")
  description      String?  @map("description") @db.VarChar(255)

  @@map("kelly_image")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model noticeAttachments {
  id        BigInt   @id @default(autoincrement()) @map("id")
  noticeId  BigInt   @map("notice_id")
  fileName  String   @map("file_name") @db.VarChar(255)
  fileUrl   String   @map("file_url") @db.VarChar(500)
  mimeType  String?  @map("mime_type") @db.VarChar(120)
  fileSize  Int?     @map("file_size")
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  notices   notices  @relation(fields: [noticeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_notice_attachments_notice")

  @@index([noticeId], map: "IX_notice_attach_notice")
  @@map("notice_attachments")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model noticeCategories {
  id        BigInt    @id @default(autoincrement()) @map("id")
  name      String    @unique(map: "name") @map("name") @db.VarChar(80)
  slug      String    @unique(map: "slug") @map("slug") @db.VarChar(80)
  sortOrder Int       @default(0) @map("sort_order")
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.DateTime(0)
  notices   notices[]

  @@map("notice_categories")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notices {
  id                BigInt              @id @default(autoincrement()) @map("id")
  title             String              @map("title") @db.VarChar(200)
  content           String?             @map("content") @db.MediumText
  categoryId        BigInt              @map("category_id")
  visibility        notices_visibility  @default(PUBLIC) @map("visibility")
  createdAt         DateTime            @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt         DateTime            @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt         DateTime?           @map("deleted_at") @db.DateTime(0)
  noticeAttachments noticeAttachments[]
  noticeCategories  noticeCategories    @relation(fields: [categoryId], references: [id], onUpdate: Restrict, map: "fk_notices_category")

  @@index([categoryId], map: "IX_notices_category")
  @@index([deletedAt], map: "IX_notices_deleted")
  @@index([visibility], map: "IX_notices_visibility")
  @@map("notices")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model worship {
  worshipId   BigInt   @id @default(autoincrement()) @map("worship_id")
  title       String   @map("title") @db.VarChar(255)
  preacher    String?  @map("preacher") @db.VarChar(255)
  bibleText   String?  @map("bible_text") @db.VarChar(255)
  youtubeUrl  String   @map("youtube_url") @db.VarChar(500)
  worshipDate DateTime @map("worship_date") @db.Date
  worshipType String   @map("worship_type") @db.VarChar(50)
  isPublic    Boolean  @default(true) @map("is_public")
  description String?  @map("description") @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.DateTime(0)

  @@index([worshipDate], map: "idx_worship_date")
  @@map("worship")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model worshipImage {
  imageId          BigInt   @id @default(autoincrement()) @map("image_id")
  worshipId        BigInt?  @map("worship_id")
  originalFilename String   @map("original_filename") @db.VarChar(255)
  storedFilename   String   @map("stored_filename") @db.VarChar(255)
  filePath         String   @map("file_path") @db.VarChar(500)
  fileExtension    String   @map("file_extension") @db.VarChar(10)
  contentType      String   @map("content_type") @db.VarChar(100)
  fileSize         BigInt   @map("file_size")
  createdAt        DateTime @default(now()) @map("created_at") @db.DateTime(0)
  deleted          Boolean  @default(false) @map("deleted")
  description      String?  @map("description") @db.VarChar(255)

  @@map("worship_image")
}

// datasource, generator는 기존 그대로 사용하세요.
// datasource db {
//   provider = "mysql" // MariaDB 10.x 호환
//   url      = env("DATABASE_URL")
// }

// ===== Enums =====
enum user_role {
  ROLE_USER
  ROLE_ADMIN
}

enum approval_status {
  PENDING
  APPROVED
  REJECTED
}

enum terms_status {
  DRAFT
  PUBLISHED
}

// ===== User & Auth =====
model user {
  userId            BigInt    @id @default(autoincrement()) @map("user_id")
  // 소셜 제거, 자체가입 기준 필드
  name              String    @map("name") @db.VarChar(255)
  phone             String    @unique @map("phone") @db.VarChar(20) // 010-1234-5678 등
  email             String?   @map("email") @db.VarChar(100)
  passwordHash      String    @map("password_hash") @db.VarChar(255) // bcrypt/argon2 결과
  passwordUpdatedAt DateTime? @map("password_updated_at") @db.DateTime(0)

  role           user_role       @default(ROLE_USER) @map("role")
  approvalStatus approval_status @default(PENDING) @map("approval_status")
  enabled        Boolean         @default(true) @map("enabled")
  lastLoginAt    DateTime?       @map("last_login_at") @db.DateTime(0)

  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.DateTime(0)

  // Relations
  refreshTokens refreshToken[]
  consents      userConsent[]

  @@index([phone], map: "idx_user_phone")
  @@map("user")
}

model refreshToken {
  tokenId    BigInt   @id @default(autoincrement()) @map("token_id")
  userId     BigInt   @map("user_id")
  token      String   @unique(map: "uk_refresh_token") @map("refresh_token") @db.VarChar(255)
  expiryDate DateTime @map("expiry_date") @db.DateTime(0)
  createdAt  DateTime @default(now()) @map("created_at") @db.DateTime(0)

  // Relation
  user user @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "idx_user_id")
  @@map("refresh_token")
}

// ===== Terms (약관 원문) =====
model terms {
  termsId     BigInt       @id @default(autoincrement()) @map("terms_id")
  slug        String       @map("slug") @db.VarChar(50) // 'privacy', 'tos'
  version     Int          @map("version")
  locale      String       @map("locale") @db.VarChar(10) // 'ko-KR'
  title       String       @map("title") @db.VarChar(200)
  contentMd   String?      @map("content_md") @db.MediumText // Markdown 저장 시
  contentHtml String?      @map("content_html") @db.MediumText // HTML 저장 시
  status      terms_status @map("status")
  effectiveAt DateTime     @map("effective_at") @db.DateTime(0)
  createdAt   DateTime     @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime     @default(now()) @map("updated_at") @db.DateTime(0)

  // Relations
  consents userConsent[]

  @@unique([slug, locale, version], map: "uk_terms_slug_locale_version")
  @@index([status, effectiveAt], map: "idx_terms_status_effective")
  @@map("terms")
}

// ===== User Consent (동의 이력) =====
model userConsent {
  consentId       BigInt   @id @default(autoincrement()) @map("consent_id")
  userId          BigInt   @map("user_id")
  termsId         BigInt   @map("terms_id")
  termsVersion    Int      @map("terms_version")
  contentHash     String?  @map("content_hash") @db.Char(64) // SHA-256 등
  contentSnapshot String?  @map("content_snapshot") @db.MediumText // 동의 당시 원문 스냅샷
  consentedAt     DateTime @default(now()) @map("consented_at") @db.DateTime(0)
  ipAddress       String?  @map("ip_address") @db.VarChar(45)
  userAgent       String?  @map("user_agent") @db.VarChar(500)

  // Relations
  user  user  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  terms terms @relation(fields: [termsId], references: [termsId], onDelete: Restrict)

  @@unique([userId, termsId, termsVersion], map: "uk_user_terms_version") // 동일 버전에 중복 동의 방지
  @@index([userId, consentedAt], map: "idx_user_consent_user_date")
  @@map("user_consent")
}

model phoneVerificationLog {
  id         BigInt    @id @default(autoincrement())
  phone      String    @map("phone") @db.VarChar(20)
  provider   String?   @map("provider") @db.VarChar(50) // 예: 'aligo', 'coolsms', 'pass'
  verifiedAt DateTime? @map("verified_at") @db.DateTime(0)
  resultCode String?   @map("result_code") @db.VarChar(20)
  message    String?   @map("message") @db.VarChar(255)
  createdAt  DateTime  @default(now()) @map("created_at") @db.DateTime(0)

  @@index([phone], map: "idx_phone_verification_log_phone")
  @@map("phone_verification_log")
}

enum notices_visibility {
  PUBLIC
  MEMBER
  STAFF
}
